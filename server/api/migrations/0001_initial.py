# Generated by Django 4.0 on 2022-01-25 17:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=256, unique=True)),
                ('fav_color', models.CharField(blank=True, max_length=120)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=254)),
                ('race', models.CharField(choices=[['dragonborn', 'Dragonborn'], ['dwarf', 'Bard'], ['elf', 'Cleric'], ['gnome', 'Druid'], ['half-elf', 'Fighter'], ['halfling', 'Monk'], ['half-orc', 'Paladin'], ['human', 'Ranger'], ['tiefling', 'Rogue']], max_length=64)),
                ('_class', models.CharField(choices=[['barbarian', 'Barbarian'], ['bard', 'Bard'], ['cleric', 'Cleric'], ['druid', 'Druid'], ['fighter', 'Fighter'], ['monk', 'Monk'], ['paladin', 'Paladin'], ['ranger', 'Ranger'], ['rogue', 'Rogue'], ['sorcerer', 'Sorcerer'], ['warlock', 'Warlock'], ['wizard', 'Wizard'], ['artificer', 'Artificer'], ['bloodHunter', 'Blood Hunter']], max_length=64)),
                ('strength', models.IntegerField(default=0)),
                ('dexterity', models.IntegerField(default=0)),
                ('constitution', models.IntegerField(default=0)),
                ('intelligence', models.IntegerField(default=0)),
                ('wisdom', models.IntegerField(default=0)),
                ('charisma', models.IntegerField(default=0)),
                ('acrobatics', models.IntegerField(default=0)),
                ('animalHandling', models.IntegerField(default=0)),
                ('arcana', models.IntegerField(default=0)),
                ('atheletics', models.IntegerField(default=0)),
                ('deception', models.IntegerField(default=0)),
                ('history', models.IntegerField(default=0)),
                ('insight', models.IntegerField(default=0)),
                ('intimidation', models.IntegerField(default=0)),
                ('investigation', models.IntegerField(default=0)),
                ('medicine', models.IntegerField(default=0)),
                ('nature', models.IntegerField(default=0)),
                ('perception', models.IntegerField(default=0)),
                ('performance', models.IntegerField(default=0)),
                ('persuasion', models.IntegerField(default=0)),
                ('religion', models.IntegerField(default=0)),
                ('sleightOfHand', models.IntegerField(default=0)),
                ('stealth', models.IntegerField(default=0)),
                ('survival', models.IntegerField(default=0)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.campaign')),
            ],
        ),
    ]
